Антипаттерны в коде.
1. Хардкод имени БД. Встречается в разных местах -> Вынес в константу.
2. Спагетти код. При добавлении декораторa @add_route возникла проблема с импортами (для того, чтобы работал декоратор в файле views
уже должен быть экземпляр Application. Из-за этого часть маршрутов осталась во views.py, а часть с декоратором
осталась в app.py, т.к. там создается экземпляр Application.
Решением проблемы было бы создание app во views с последующим импортом в app... но тогда потерялся бы смысл в app.py
3. В файле models.py содержатся примеси и переиспользуемые классы. В контекте небольшого приложения проблемы не
возникает, но при масштабировании следует подобные вещи выносить в отдельный модуль.
4. Во views.py есть дублирование кода в функциональных view. Опять же не проблема для небольшого проекта, но
масштабируется плохо. Следовало бы перевести в CBV или хотя бы сделать обобщенную функциональную вьюшку.
OOP:
1. Божественный объект. Хоть и в контексте этот подход оправдан, мы имеем инстанс Application, через который происходит
абсолютно все взаимодействие.
Методология:
1. Copy-paste каюсь... с ростом проекта интерес к нему неизбежно падает, особенно когда речь идет о очередном "интернет
магазине". Часть заданий выполнена по данной технологии, но, естественно с неизбежной адаптацией к своему проекту и его
структуре (которая, может и не является оптимальной, но сознательно сделана отличной от того, что предлагалось в примере)
Таким образом необходимость включать мозг при выполнении заданий никуда не исчезла =)
2.Фактор невероятности. Здесь даже не о текущем курсе, а в целом об обучении. Очень часто, даже слишком часто в
обучении мы расчитывали на "идеального пользователя", избегая валидации ввода и прочего.
Проблема в том, что обработка этих проблем занимает значительную часть реальной разработки.
3. Велосипед. Этот курс про это. Но опыт получен ;-)
4. Квадратное колесо? Пожалуй.

